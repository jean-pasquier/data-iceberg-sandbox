volumes:
  postgres:
  minio:


services:

  #### Shared postgres: 1 single postgres instance with 1 database per service

  postgres:
    image: postgres:17
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      # create one user:password/db for each following services
      - POSTGRES_DATABASES=openfga,keycloak,lakekeeper,nimtable,risingwave,rwconsole
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./create-postgres-databases.sh:/docker-entrypoint-initdb.d/create-postgres-databases.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s


  ### Open FGA ###

  openfga-migrate:
    image: openfga/openfga:v1.8
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://openfga:openfga@postgres:5432/openfga?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy

  openfga:
    image: openfga/openfga:v1.8
    command: run
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://openfga:openfga@postgres:5432/openfga?sslmode=disable
      - OPENFGA_DATASTORE_MAX_OPEN_CONNS=50
      - OPENFGA_PLAYGROUND_ENABLED=false
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=openfga:8081"]
      interval: 5s
      timeout: 30s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      openfga-migrate:
        condition: service_completed_successfully


  ### Keycloak ###

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
    volumes:
      - ./keycloak-realm.json:/opt/keycloak/data/import/realm.json
    ports:
      - "30080:8080"
    command: [ "start-dev", "--metrics-enabled=true", "--health-enabled=true", "--import-realm", "--verbose", "--log-level=INFO", "--features=token-exchange" ]
    healthcheck:
      test: [ "CMD-SHELL", 'exec 3<>/dev/tcp/127.0.0.1/8080;echo -e "GET /realms/master/.well-known/openid-configuration HTTP/1.1\r\nhost: 127.0.0.1:8080\r\nConnection: close\r\n\r\n" >&3;grep "jwks_uri"  <&3' ]
      interval: 5s
      timeout: 15s
      retries: 3
      start_period: 120s
    depends_on:
      postgres:
        condition: service_healthy


  ### Minio ###

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    environment:
      - MINIO_ROOT_USER=minio-root-user
      - MINIO_ROOT_PASSWORD=minio-root-password
      - MINIO_CI_CD="1"
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_PROMETHEUS_URL="http://prometheus:9500"
      - MINIO_DOMAIN="minio"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    command: [ "server", "--console-address", ":9001", "/data" ]
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 15s

  minio-init:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    depends_on:
      minio:
        condition: service_healthy
    restart: no
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 minio-root-user minio-root-password;
      /usr/bin/mc mb minio/bucket-test-iceberg-datalake;
      /usr/bin/mc mb minio/risingwave-hummock001;
      exit 0;
      "
  

  ### Lakekeeper ###

  lakekeeper-migrate:
    image: quay.io/lakekeeper/catalog:v0.10.3
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://lakekeeper:lakekeeper@postgres:5432/lakekeeper
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://lakekeeper:lakekeeper@postgres:5432/lakekeeper
      - LAKEKEEPER__AUTHZ_BACKEND=openfga
      - LAKEKEEPER__OPENFGA__ENDPOINT=http://openfga:8081
      - RUST_LOG=info
    restart: "no"
    entrypoint: [ "/home/nonroot/lakekeeper", "migrate" ]
    depends_on:
      postgres:
        condition: service_healthy
      openfga:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully

  lakekeeper:
    image: quay.io/lakekeeper/catalog:v0.10.3
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://lakekeeper:lakekeeper@postgres:5432/lakekeeper
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://lakekeeper:lakekeeper@postgres:5432/lakekeeper
      - LAKEKEEPER__AUTHZ_BACKEND=openfga
      - LAKEKEEPER__OPENFGA__ENDPOINT=http://openfga:8081
      - LAKEKEEPER__OPENID_PROVIDER_URI=http://keycloak:8080/realms/iceberg
      - LAKEKEEPER__OPENID_ADDITIONAL_ISSUERS=http://localhost:30080/realms/iceberg
      - LAKEKEEPER__OPENID_AUDIENCE=lakekeeper
      - LAKEKEEPER__UI__OPENID_CLIENT_ID=lakekeeper
      - LAKEKEEPER__UI__OPENID_PROVIDER_URI=http://localhost:30080/realms/iceberg
      - RUST_LOG=info
    command: [ "serve" ]
    healthcheck:
      test: [ "CMD", "/home/nonroot/lakekeeper", "healthcheck" ]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 3s
    ports:
      - "8181:8181"
    depends_on:
      lakekeeper-migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  lakekeeper-init:
    image: badouralix/curl-jq-yq:ubuntu
    restart: "no"
    environment:
      - CLIENT_ID=lakekeeper-operator
      - CLIENT_SECRET=bvMiebZ23atcNaE703kKWb2zTQSl1mGE
    entrypoint: >
      /bin/sh -c '      
      
      ACCESS_TOKEN=$(curl -s -X POST "http://keycloak:8080/realms/iceberg/protocol/openid-connect/token" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=client_credentials&client_id=$$CLIENT_ID&client_secret=$$CLIENT_SECRET&scope=lakekeeper" | jq -r .access_token);
      
      echo "Bootstrapping lakekeeper";
      curl -s -X POST "http://lakekeeper:8181/management/v1/bootstrap" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$ACCESS_TOKEN" \
        -d "{\"accept-terms-of-use\": true}";
      
      echo "Assigning permission to admin user + service principal + nimtable";
      curl -s -X POST "http://lakekeeper:8181/management/v1/permissions/server/assignments" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$ACCESS_TOKEN" \
        -d "{
              \"writes\": [
                {
                  \"user\": \"oidc~7ff741f3-8ace-44b0-bb79-2bb48cf0cd3a\",
                  \"type\": \"admin\"
                },
                {
                  \"user\": \"oidc~974729d6-6de6-4e1e-9413-850c6426f4db\",
                  \"type\": \"operator\"
                },
                {
                  \"user\": \"oidc~d2674120-a682-4866-adab-94eb0a045141\",
                  \"type\": \"operator\"
                }
              ]
            }";
      
      echo "Assigning project permission to admin user";
      curl -s -X POST "http://lakekeeper:8181/management/v1/permissions/project/assignments" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$ACCESS_TOKEN" \
        -d "{\"writes\": [{\"user\": \"oidc~7ff741f3-8ace-44b0-bb79-2bb48cf0cd3a\", \"type\": \"project_admin\"}]}";
      
      echo "Creating first iceberg warehouse";
      WAREHOUSE_ID=$(curl -s -X POST "http://lakekeeper:8181/management/v1/warehouse" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$ACCESS_TOKEN" \
        -d "{
            \"warehouse-name\": \"test-warehouse\",
            \"storage-profile\": {
              \"type\": \"s3\",
              \"bucket\": \"bucket-test-iceberg-datalake\",
              \"key-prefix\": \"test-warehouse\",
              \"endpoint\": \"http://minio:9000\",
              \"region\": \"local-01\",
              \"path-style-access\": true,
              \"flavor\": \"minio\",
              \"sts-enabled\": true
            },
            \"storage-credential\": {
              \"type\": \"s3\",
              \"credential-type\": \"access-key\",
              \"aws-access-key-id\": \"minio-root-user\",
              \"aws-secret-access-key\": \"minio-root-password\"
            }
          }" | jq -r .\"warehouse-id\");
      
      echo "Warehouse created with id: $$WAREHOUSE_ID. Creating customer namespace";
      NAMESPACE_ID=$(curl -s -X POST "http://lakekeeper:8181/catalog/v1/$$WAREHOUSE_ID/namespaces" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$ACCESS_TOKEN" \
        -d "{\"namespace\": [\"customer\"], \"properties\": {\"owner\":  \"peter\"}}" | jq -r .properties.namespace_id);
      
      echo "Namespace created with id: $$NAMESPACE_ID. Assigning first permissions: pete owner and spark can create/modify.";
      curl -s -X POST "http://lakekeeper:8181/management/v1/permissions/namespace/$$NAMESPACE_ID/assignments" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$ACCESS_TOKEN" \
        -d "{
          \"writes\": [
            {
              \"user\": \"oidc~cfb55bf6-fcbb-4a1e-bfec-30c6649b52f8\",
              \"type\": \"ownership\"
            },
            {
              \"user\": \"oidc~9410d0bf-4487-4177-a34f-af364cac0a59\",
              \"type\": \"create\"
            },
            {
              \"user\": \"oidc~9410d0bf-4487-4177-a34f-af364cac0a59\",
              \"type\": \"modify\"
            }
          ]
        }";
      
      '
    depends_on:
      lakekeeper:
        condition: service_healthy
      keycloak:
        condition: service_healthy


  ### Open Policy Agent ###

  opa:
    image: openpolicyagent/opa:1.9.0-static
    platform: linux/arm64
    command: [ "run", "--server", "--log-format", "text", "--log-level", "debug", "--addr", "0.0.0.0:8181", "/policies" ]
    environment:
      - LAKEKEEPER_URL=http://lakekeeper:8181
      - LAKEKEEPER_TOKEN_ENDPOINT=http://keycloak:8080/realms/iceberg/protocol/openid-connect/token
      - LAKEKEEPER_CLIENT_ID=trino
      - LAKEKEEPER_CLIENT_SECRET=AK48QgaKsqdEpP9PomRJw7l2T7qWGHdZ
      - LAKEKEEPER_SCOPE=lakekeeper
      - TRINO_LAKEKEEPER_CATALOG_NAME=lakekeeper
      - LAKEKEEPER_LAKEKEEPER_WAREHOUSE=test-warehouse
    volumes:
      - ./opa-policies:/policies
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8181/health" ]
      interval: 5s
      timeout: 10s
      retries: 3
    depends_on:
      lakekeeper:
        condition: service_healthy
